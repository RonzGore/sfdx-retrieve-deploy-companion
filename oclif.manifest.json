{"version":"1.0.0","commands":{"gs:source:retrieve":{"id":"gs:source:retrieve","description":"Retrieves specific metadata/s to a sepcified location","usage":"<%= command.id %> -t <string> -d <string> [-n <array>] [-i] [-m] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal]","pluginName":"sfdx-retrieve-deploy-companion","pluginType":"core","aliases":[],"examples":["sfdx gs:source:retrieve --type ApexClass --names MyClass1,MyClass2 --targetdir app/main/default/classes\n    // retrieves MyClass1 and MyClass2 from an org (sratch/non-scratch) to the provided directory location\n    i.e app/main/default directory\n\n    sfdx gs:source:retrieve --type Layout --names Layout1 --targetdir app/main/default --includedir\n    // retrieves Layout1 along with the layouts folder from an org (sratch/non-scratch) to the provided directory\n    location i.e app/main/default directory\n\n    sfdx gs:source:retrieve --type PermissionSet --targetdir app/main/default --includedir\n    // retrieves all the permission sets along with the PermissionSet folder from an org (sratch/non-scratch) to the provided directory\n    location i.e. app/main/default directory\n    "],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal)","options":["trace","debug","info","warn","error","fatal"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"names":{"name":"names","type":"option","char":"n","description":"Name of the component/s to retrieve","required":false},"type":{"name":"type","type":"option","char":"t","description":"Type of the components to retrieve, only support one component at a time","required":true},"targetdir":{"name":"targetdir","type":"option","char":"d","description":"Path of target directory where the component needs to be pulled","required":true},"includedir":{"name":"includedir","type":"boolean","char":"i","description":"If you want to retrieve the directory as well along with the metadata components","allowNo":false},"mdapiformat":{"name":"mdapiformat","type":"boolean","char":"m","description":"If you want to retrieve the content in mdapi format","allowNo":false}},"args":[]},"gs:source:deploy:cmp":{"id":"gs:source:deploy:cmp","description":"Deploys a particular component in source-format from a specified location","usage":"<%= command.id %> [-p <string>] [-c] [-l <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal]","pluginName":"sfdx-retrieve-deploy-companion","pluginType":"core","aliases":[],"examples":["sfdx gs:source:deploy:cmp --path app/main/default/permissionsets/MyPermissionSet -u MyTargerOrg\n//deploys the MyPermissionSet to an org with alias MyTargetOrg\n\nsfdx gs:source:deploy:cmp -p app/main/default/permissionsets/MyClass --validate\n//validates the deployment of MyClass to a default target org"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal)","options":["trace","debug","info","warn","error","fatal"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"path":{"name":"path","type":"option","char":"p","description":"path of the component in source format to be pushed","required":false},"validate":{"name":"validate","type":"boolean","char":"c","description":"validate only the push","required":false,"allowNo":false},"packagelocation":{"name":"packagelocation","type":"option","char":"l","description":"path to store the mdapipackage, if not provided stores in the current directory","required":false}},"args":[]},"gs:source:deploy:dir":{"id":"gs:source:deploy:dir","description":"Deploys a directory or module in source-format from a specified location","usage":"<%= command.id %> [-d <string>] [-c] [-l <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal]","pluginName":"sfdx-retrieve-deploy-companion","pluginType":"core","aliases":[],"examples":["sfdx gs:source:deploy:dir --directorypath app\n//deploys app module to the default target org(if any)\n\nsfdx gs:source:deploy:dir -d app/main/default/PermissionSets -c -u MyTargetOrg\n//validates the deployment of all the permission sets from the directory myFolder/PermissionSets on MyTargetOrg"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal)","options":["trace","debug","info","warn","error","fatal"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"directorypath":{"name":"directorypath","type":"option","char":"d","description":"path of the directory to be pushed","required":false},"validate":{"name":"validate","type":"boolean","char":"c","description":"validate only the push","required":false,"allowNo":false},"packagelocation":{"name":"packagelocation","type":"option","char":"l","description":"path to store the mdapipackage, if not provided stores in the current directory","required":false}},"args":[]},"gs:source:deploy:module":{"id":"gs:source:deploy:module","description":"Deploys a module in source-format from a sepcified location along with it's dependencies","usage":"<%= command.id %> -p <string> [-o] [-l <string>] [-c] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal]","pluginName":"sfdx-retrieve-deploy-companion","pluginType":"core","aliases":[],"examples":["sfdx gs:source:deploy:module -p config/module5.json -u MyScratchOrg\n//deploys a module to a target org (both scratch and non-scratch works) having alias MyScratchOrg\n//with all it's dependecies(modules) defined in the json file passed\n//against the -p param/flag as a single mdapi package and stores the generated mdapi\n//package in the sfdx project's root\n\nsfdx gs:source:deploy:module --dependenciesfile config/module5.json -u MyScratchOrg --validate\n//validates the deplpoyment of a module to a target org\n//(both scratch and non-scratch works) having alias MyScratchOrg\n//with all it's dependecies(modules) defined in the json file passed\n//against the -p param/flag as a single mdapi package and stores the generated mdapi\n//package in the sfdx project's root\n\nsfdx gs:source:deploy:module -p config/module5.json -u MyScratchOrg --packagelocation ./mdpackages\n//deploys a module to a target org (both scratch and non-scratch works) having alias MyScratchOrg\n//with all it's dependecies(modules) defined in the json file passed\n//against the -p param/flag as a single mdapi package and stores the generated mdapi\n//package in the 'mdpackages' directory\n\nsfdx gs:source:deploy:module -p config/module5.json -u MyScratchOrg --onebyone\n//deploys a module to a a target org (both scratch and non-scratch works) having alias MyScratchOrg\n//with all it's dependecies(modules) defined in the json file passed\n//against the -p param/flag one by one"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal)","options":["trace","debug","info","warn","error","fatal"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"dependenciesfile":{"name":"dependenciesfile","type":"option","char":"p","description":"path to the dependency json file,\n    to deploy a single module or directory, please use gs:source:deploy:dir command","required":true},"onebyone":{"name":"onebyone","type":"boolean","char":"o","description":"deploys packages one by one in their order of dependencies,\n    if not passed deploys all of them as a single grouped and converted md package","required":false,"allowNo":false},"packagelocation":{"name":"packagelocation","type":"option","char":"l","description":"path to store the mdapipackage, if not provided stores in the current directory,\n    not applicable when opting for one by one deployment","required":false},"validate":{"name":"validate","type":"boolean","char":"c","description":"validate only the push, not applicable when opting for one by one deployment","required":false,"allowNo":false}},"args":[]}}}